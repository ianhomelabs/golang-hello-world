name: 'Build and Deploy to GKE'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'elated-oxide-453805-h7'
  GAR_LOCATION: 'asia-southeast1'
  GKE_CLUSTER: 'development-cluster'
  GKE_ZONE: 'asia-southeast1-a'
  DEPLOYMENT_NAME: 'golang-hello-world'
  REPOSITORY: 'golang-hello-world'
  IMAGE: 'hello-world'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/784232624005/locations/global/workloadIdentityPools/github-actions-ianhomelabs/providers/github-actions-ianhomelabs'
  SERVICE_ACCOUNT: 'deployer@elated-oxide-453805-h7.iam.gserviceaccount.com'

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          project_id: '${{ env.PROJECT_ID }}'
          service_account: '${{ env.SERVICE_ACCOUNT }}'

      - name: 'Docker Auth'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116'
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'
          project_id: '${{ env.PROJECT_ID }}'

      - name: 'Configure docker to use Artifact Registry'
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev
          
      - name: 'Build and push Docker container'
        run: |-
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            .

          docker push "${DOCKER_TAG}"

      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize.tar.gz https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          tar -xzf kustomize.tar.gz
          chmod u+x ./kustomize

      - name: 'Pre-deployment checks and cleanup'
        run: |-
          # Buat script pre-deployment
          cat > pre-deploy.sh << 'EOL'
          #!/bin/bash
          
          # Fungsi untuk memeriksa pods yang stuck terminating
          check_terminating_pods() {
            local namespace=${1:-default}
            local deployment_name=$2
            
            echo "Memeriksa pods yang stuck terminating untuk deployment $deployment_name di namespace $namespace..."
            
            # Dapatkan pods yang terminating
            TERMINATING_PODS=$(kubectl get pods -n $namespace | grep $deployment_name | grep "Terminating" | awk '{print $1}')
            
            if [ -n "$TERMINATING_PODS" ]; then
              echo "Ditemukan pods yang stuck terminating:"
              echo "$TERMINATING_PODS"
              
              echo "Mencoba menghapus pods yang stuck terminating..."
              for pod in $TERMINATING_PODS; do
                echo "Menghapus pod $pod dengan force..."
                kubectl delete pod $pod -n $namespace --force --grace-period=0
                sleep 2
              done
            else
              echo "Tidak ada pods yang stuck terminating."
            fi
          }
          
          # Main script
          NAMESPACE=${1:-default}
          DEPLOYMENT_NAME=$2
          
          echo "=== Pre-deployment checks untuk $DEPLOYMENT_NAME ==="
          
          # Cek pods yang terminating
          check_terminating_pods $NAMESPACE $DEPLOYMENT_NAME
          
          echo "=== Pre-deployment checks selesai ==="
          EOL
          
          chmod +x pre-deploy.sh
          
          # Jalankan script pre-deployment
          ./pre-deploy.sh ${{ env.NAMESPACE }} ${{ env.DEPLOYMENT_NAME }}

      - name: 'Deploy to GKE'
        timeout-minutes: 10  # Tambahkan timeout untuk seluruh step
        run: |-
          # Pastikan placeholder di kustomization.yaml sesuai dengan yang digunakan di workflow
          cat kustomization.yaml
          
          # Ganti image dengan yang baru dibuild
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}
          
          # Verifikasi perubahan
          cat kustomization.yaml
          
          # Apply ke cluster dengan strategi yang lebih agresif
          ./kustomize build . | kubectl apply -f - --force
          
          # Periksa status deployment dengan timeout
          kubectl rollout status deployment/${DEPLOYMENT_NAME} --timeout=5m
          
          # Jika rollout gagal karena timeout, coba restart deployment
          if [ $? -ne 0 ]; then
            echo "Deployment rollout timeout. Mencoba restart deployment..."
            kubectl rollout restart deployment/${DEPLOYMENT_NAME}
            kubectl rollout status deployment/${DEPLOYMENT_NAME} --timeout=5m
            
            # Jika masih gagal, coba force delete dan apply ulang
            if [ $? -ne 0 ]; then
              echo "Deployment rollout masih timeout. Mencoba force delete pods..."
              kubectl get pods | grep ${DEPLOYMENT_NAME} | awk '{print $1}' | xargs kubectl delete pod --force --grace-period=0
              sleep 10
              ./kustomize build . | kubectl apply -f - --force
              kubectl rollout status deployment/${DEPLOYMENT_NAME} --timeout=5m
            fi
          fi
          
          # Tampilkan status akhir
          kubectl get deployments -o wide
          kubectl get pods | grep ${DEPLOYMENT_NAME}
          kubectl get services -o wide
